From 9b57d3824a24ae5000e9ca33bda36b65c86772f4 Mon Sep 17 00:00:00 2001
From: Elihuang <1458143435@qq.com>
Date: Thu, 4 Oct 2018 22:47:36 +0800
Subject: [PATCH] task008 output source files

---
 task008/Makefile      |   5 ++
 task008/helloworld.c  | 209 ++++++++++++++++++++++++++++++++++++++++++++++++++
 task008/testdebugfs.c | 123 +++++++++++++++++++++++++++++
 3 files changed, 337 insertions(+)
 create mode 100644 task008/Makefile
 create mode 100644 task008/helloworld.c
 create mode 100644 task008/testdebugfs.c

diff --git a/task008/Makefile b/task008/Makefile
new file mode 100644
index 0000000..e111598
--- /dev/null
+++ b/task008/Makefile
@@ -0,0 +1,5 @@
+obj-m :=helloworld.o
+all:
+	make -C /lib/modules/$(shell uname -r)/build SUBDIRS=$(PWD) modules
+clean:
+	make -C /lib/modules/$(shell uname -r)/build SUBDIRS=$(PWD) clean
diff --git a/task008/helloworld.c b/task008/helloworld.c
new file mode 100644
index 0000000..2d70088
--- /dev/null
+++ b/task008/helloworld.c
@@ -0,0 +1,209 @@
+/*
+ *
+ *  THIS IS A DEBUGFS TEST MODULE
+ */
+
+/*
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
+ *
+ */
+#include <linux/module.h>
+#include <linux/kernel.h>
+#include <linux/init.h>
+#include <linux/fs.h>
+#include <linux/string.h>
+#include <linux/timer.h>
+#include <linux/debugfs.h>
+#include <linux/uaccess.h> //copy_to_user
+#include <linux/slab.h> //kmalloc
+#include <linux/spinlock.h>
+
+MODULE_AUTHOR("HJH");
+MODULE_DESCRIPTION("This is a debugfs test module\n");
+MODULE_LICENSE("GPL");
+
+#define MISCDEVICE "eudyptula"
+static char default_content[] = "defaults";
+static const char my_assigned_id[] = "7c1caf2f50d1";
+static struct dentry *my_debugfs_subdirectory;
+static void *test_foo;
+static DEFINE_SPINLOCK(foo_write_read_lock);
+static long ioctl_to_debugfs(struct file *filp, unsigned int cmd, unsigned long arg)
+{
+	printk(KERN_DEBUG"ioctl_to_debugfs succeeded\n");
+	return 0;
+}
+static ssize_t read_from_debugfs_file_id(struct file *filp, char __user *buf, size_t count, loff_t *f_ops)
+{
+	char *tmp = (char *) filp->private_data;
+	int len = strlen(tmp);
+	int result = 0;
+	
+	printk(KERN_DEBUG"read_from_debugfs_file_id succeeded\n");
+	if (count < 0)
+		return -1;
+	if (*f_ops > len - 1)
+		return 0;
+	if ((*f_ops+count) <= len) {
+		copy_to_user(buf, tmp + (*f_ops), count);
+		result = count;
+	} else {
+		copy_to_user(buf, tmp + (*f_ops), len - (*f_ops));
+		result = len - (*f_ops);
+	}
+	return result;
+}
+static ssize_t read_from_debugfs_file_foo(struct file *filp, char __user *buf, size_t count, loff_t *f_ops)
+{
+	char *tmp = (char *) filp->private_data;
+	int len = 0;
+	int result = 0;
+	
+	printk(KERN_DEBUG"read_from_debugfs_file_id succeeded\n");
+	if (count < 0)
+		return -1;
+	spin_lock(&foo_write_read_lock);
+	len = strlen(tmp);
+	if (*f_ops > len - 1)
+		return 0;
+	if ((*f_ops+count) <= len) {
+		copy_to_user(buf, tmp + (*f_ops), count);
+		spin_unlock(&foo_write_read_lock);
+		result = count;
+	} else {
+		copy_to_user(buf, tmp + (*f_ops), len - (*f_ops));
+		spin_unlock(&foo_write_read_lock);
+		result = len - (*f_ops);
+	}
+	return result;
+}
+static ssize_t read_from_debugfs_file_jiffies(struct file *filp, char __user *buf, size_t count, loff_t *f_ops)
+{
+	int len = sizeof(unsigned long);
+	unsigned long *tmp = &jiffies;
+	int result = 0;
+	
+	printk(KERN_DEBUG"read_from_debugfs_file_jiffies succeeded\n");
+	if (count < 0)
+		return -1;
+	if (*f_ops > len - 1)
+		return 0;
+	if ((*f_ops+count) <= len) {
+		copy_to_user(buf, tmp + (*f_ops), count);
+		result = count;
+	} else {
+		copy_to_user(buf, tmp + (*f_ops), len - (*f_ops));
+		result = len - (*f_ops);
+	}
+	return result;
+}
+static ssize_t write_to_debugfs_file_id(struct file *filp, const char __user *buf, size_t count, loff_t *f_ops)
+{
+	int retval = 0;
+	char *tmp = filp->private_data;
+	char *buf_copy = kmalloc(sizeof(char)*32, GFP_KERNEL);
+	char *my_assigned_id_ptr = my_assigned_id;
+	
+	if (copy_from_user(buf_copy, buf, count)) {
+		printk(KERN_DEBUG"debugfs_file_id: failed when copy\n");
+		retval = -2;
+		goto out;
+	}
+	if (strcmp(buf_copy, my_assigned_id_ptr)) {
+		printk(KERN_DEBUG"write_to_debugfs_file_id: id is error,write failed:%s vs %s\n", buf_copy, my_assigned_id_ptr);
+		retval = -1;
+		goto out;
+	}
+	if (copy_from_user(tmp, buf, count)) {
+		printk(KERN_DEBUG"write_to_debugfs_file_id: failed\n");
+		retval = -3;
+		goto out;
+	} else {
+		printk(KERN_DEBUG"write_to_debugfs_file_id: succeeded\n");
+	}
+	printk(KERN_DEBUG"3: my_assigned_id is %s,0x%x\n", default_content, &default_content[11]);
+out:
+	kfree(buf_copy);
+	return retval;
+}
+static ssize_t write_to_debugfs_file_foo(struct file *filp, const char __user *buf, size_t count, loff_t *f_ops)
+{
+	int retval = 0;
+	char *tmp = filp->private_data;
+	
+	spin_lock(&foo_write_read_lock);
+	if (copy_from_user(tmp, buf, count)) {
+		printk(KERN_DEBUG"write_to_debugfs_file_id: failed\n");
+		retval = -3;
+		spin_unlock(&foo_write_read_lock);
+		goto out;
+	} else {
+		spin_unlock(&foo_write_read_lock);
+		printk(KERN_DEBUG"write_to_debugfs_file_id: succeeded\n");
+	}
+	printk(KERN_DEBUG"3: my_assigned_id is %s,0x%x\n", tmp, tmp);
+out:
+	return retval;
+}
+static int open_debugfs_file(struct inode *inodestruct, struct file *filp)
+{
+	filp->private_data = inodestruct->i_private;
+	printk(KERN_DEBUG"open_debugfs_file succeeded\n");
+	return 0;
+}
+static int release_debugfs_file(struct inode *inodestruct, struct file *filp)
+{
+	printk(KERN_DEBUG"release_debugfs_file succeeded\n");
+	return 0;
+}
+static struct file_operations the_id_file_ops = {
+	.open = open_debugfs_file,
+	.write = write_to_debugfs_file_id,
+	.read = read_from_debugfs_file_id,
+	.release = release_debugfs_file,
+	.unlocked_ioctl = ioctl_to_debugfs,
+};
+static struct file_operations the_jiffies_file_ops = {
+	.open = open_debugfs_file,
+	.read = read_from_debugfs_file_jiffies,
+	.release = release_debugfs_file,
+};
+static struct file_operations the_foo_file_ops = {
+	.open = open_debugfs_file,
+	.write = write_to_debugfs_file_foo,
+	.read = read_from_debugfs_file_foo,
+	.release = release_debugfs_file,
+	.unlocked_ioctl = ioctl_to_debugfs,
+};
+static int __init debugfs_test_init(void)
+{
+	test_foo = kmalloc(4096, GFP_KERNEL);
+	my_debugfs_subdirectory = debugfs_create_dir(MISCDEVICE, NULL);
+	debugfs_create_file("id", 0766, my_debugfs_subdirectory, default_content, &the_id_file_ops);
+	debugfs_create_file("jiffies", 0444, my_debugfs_subdirectory, NULL, &the_jiffies_file_ops);
+	debugfs_create_file("foo", 0744, my_debugfs_subdirectory, test_foo, &the_foo_file_ops);
+	debugfs_create_u32("test-jiffies", 0444, my_debugfs_subdirectory, (u32 *) &jiffies);
+	printk(KERN_DEBUG"debug:Hello,My Modules!\n");
+	return 0;
+}
+static void  __exit debugfs_test_exit(void)
+{
+	debugfs_remove_recursive(my_debugfs_subdirectory);
+	kfree(test_foo);
+	printk(KERN_DEBUG"<1>Goodbye,World!leaving the kernel space");
+}
+module_init(debugfs_test_init);
+module_exit(debugfs_test_exit);
+MODULE_LICENSE("GPL");
diff --git a/task008/testdebugfs.c b/task008/testdebugfs.c
new file mode 100644
index 0000000..3258e38
--- /dev/null
+++ b/task008/testdebugfs.c
@@ -0,0 +1,123 @@
+#include <stdio.h>
+#include <stdlib.h>
+#include <unistd.h>
+#include <memory.h>
+#include <fcntl.h>
+#include <pthread.h>
+
+#define TEST_ID_FILE "/sys/kernel/debug/eudyptula/id"
+#define TEST_JIFFIES_FILE "/sys/kernel/debug/eudyptula/jiffies"
+#define TEST_FOO_FILE "/sys/kernel/debug/eudyptula/foo"
+static char *test_file_array[] = {TEST_ID_FILE, TEST_JIFFIES_FILE, TEST_FOO_FILE};
+static const char my_assigned_id[] = "7c1caf2f50d1";
+static const char *test_foo_strings[] = {"This", "is", "a", "write", "test", "for", "file", "foo"};
+void test_debugfs_file_write(int file_id, char *write_string)
+{
+	int readnum = 0;
+	int writenum = 0;
+	char *tmp = write_string;
+	char *buf = (char *) malloc(sizeof(char) * 20);
+	int fd = open(test_file_array[file_id], O_RDWR);
+	
+	memset(buf, '\0', sizeof(char) * 20);
+	printf("fd = %d\n", fd);
+	if (fd < 0) {
+		printf("cannot open the file %s\n", test_file_array[file_id]);
+		goto out;
+	}
+	printf("open the file %s successfully\n", test_file_array[file_id]);
+	writenum = write(fd, tmp, strlen(tmp) + 1);
+	if (writenum < 0) {
+		printf("write the file %s error %d\n", test_file_array[file_id], writenum);
+		goto out;
+	} else {
+		printf("write the file successfully\n");
+	}
+	readnum = read(fd, buf, 20);
+	if (readnum <= 0) {
+		printf("read the file error\n");
+		goto out;
+	}
+	printf("the file content after writen is %s\n", buf);
+out:
+	free(buf);
+	close(fd);
+	printf("close the file\n");
+}
+void test_debugfs_file_read(int file_id)
+{
+	int readnum = 0;
+	int writenum = 0;
+	char *buf = (char *) malloc(sizeof(char) * 20);
+	int fd = open(test_file_array[file_id], O_RDONLY);
+	
+	memset(buf, '\0', sizeof(char) * 20);
+	printf("fd = %d\n", fd);
+	if (fd < 0) {
+		printf("cannot open the file %s\n", test_file_array[file_id]);
+		return;
+	}
+	printf("open the file %s successfully\n", test_file_array[file_id]);
+	readnum = read(fd, buf, 20);
+	if (readnum <= 0) {
+		printf("read the file error\n");
+		close(fd);
+		return;
+	}
+	if (file_id == 1)
+		printf("the file content is %ld\n", *(unsigned long *)buf);
+	else
+		printf("the file content is %s\n", buf);
+	printf("close the file\n");
+}
+void *thread_func_to_write()
+{
+	int i = 0;
+	
+	while (i < 8) {
+		test_debugfs_file_write(2, test_foo_strings[i++]);
+		sleep(1);
+	}
+}
+void *thread_func_to_read()
+{
+	int i = 10;
+	
+	while (i-- > 0) {
+		test_debugfs_file_read(2);
+		sleep(1);
+	}
+}
+int main(int argc, void *args[])
+{	
+	int test_id = 0;
+	int test_case = 0;
+	pthread_t test_write_thread_id;
+	pthread_t test_read_thread_id;
+	int result = 0;
+	pthread_attr_t foo_read;
+	pthread_attr_t foo_write;
+	
+	if (argc == 3) {
+		test_id = atoi(args[1]);
+		test_case = atoi(args[2]);
+	} else {
+		printf("please input the test id\n");
+		return 0;
+	}
+	switch (test_id) {
+	case 3:
+		result = pthread_create(&test_write_thread_id, NULL, thread_func_to_write, NULL);
+		result = pthread_create(&test_read_thread_id, NULL, thread_func_to_read, NULL);
+		pthread_join(test_write_thread_id, NULL);
+		pthread_join(test_read_thread_id, NULL);
+		break;
+	default:
+		if (!test_case)
+			test_debugfs_file_read(test_id);
+		else
+			test_debugfs_file_write(test_id, my_assigned_id);
+		break;
+	}
+	return 0;
+}
-- 
2.7.4

